{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","features/cart.js","components/Products.jsx","components/Cart.jsx","App.js","serviceWorker.js","features/rootReducer.js","index.js"],"names":["Header","setView","menu","className","onClick","VIEW_PRODUCTS","VIEW_CART","Footer","addToCart","createAction","actions","removeFromCart","increaseAmount","decreaseAmount","reducer","createReducer","product","name","price","count","state","action","payload","data","Products","dispatch","useDispatch","useState","elements","map","racoon","key","Cart","useSelector","cart","item","App","view","mainContent","Boolean","window","location","hostname","match","rootReducer","combineReducers","cartReducer","store","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAgBeA,G,MAdA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAZ,OACX,gCACI,wDACA,yBAAKC,UAAU,QACX,yBAAKC,QAAS,kBAAMH,EAAQC,EAAKG,iBAAjC,aAGA,yBAAKD,QAAS,kBAAMH,EAAQC,EAAKI,YAAYH,UAAU,QAAvD,oBCDGI,EANA,kBACX,wH,8BCCEC,EAAYC,YAAa,eAKzBC,EAAU,CAAEF,YAAWG,eAJNF,YAAa,oBAISG,eAHtBH,YAAa,mBAGyBI,eAFtCJ,YAAa,mBAY9BK,EAAUC,YAPK,CACjB,CACIC,QAAS,CAAEC,KAAM,OAAQC,MAAO,KAChCC,MAAO,IAIc,eACxBX,GAAY,SAACY,EAAOC,GAAR,4BACND,GADM,CAET,CAAEJ,QAASK,EAAOC,QAASH,MAAO,SClBpCI,EAAO,CACT,CAAEN,KAAM,OAAQC,MAAO,KACvB,CAAED,KAAM,OAAQC,MAAO,KACvB,CAAED,KAAM,cAAeC,MAAO,KAC9B,CAAED,KAAM,SAAUC,MAAO,KACzB,CAAED,KAAM,SAAUC,MAAO,KACzB,CAAED,KAAM,UAAWC,MAAO,KAC1B,CAAED,KAAM,SAAUC,MAAO,KACzB,CAAED,KAAM,QAASC,MAAO,KACxB,CAAED,KAAM,OAAQC,MAAO,MAuBZM,EApBE,WACb,IAAMC,EAAWC,cADE,EAEeC,mBAASJ,GACrCK,EAHa,oBAGMC,KAAI,SAAAC,GAEzB,OACI,yBAAKC,IAAKD,EAAOb,MACb,6BAAMa,EAAOb,MACb,sCAAYa,EAAOZ,MAAnB,OACA,4BAAQd,QALI,kBAAMqB,EAASf,EAAQF,UAAUsB,MAK7C,+BAIZ,OACI,yBAAK3B,UAAU,YACVyB,ICGEI,EAxBF,WACT,IACMJ,EADOK,aAAY,SAAAb,GAAK,OAAIA,EAAMc,QAClBL,KAAI,SAAAM,GAAI,OAC1B,yBAAKJ,IAAKI,EAAKnB,QAAQC,MACnB,iCAAOkB,EAAKnB,QAAQC,KAApB,KACA,uCAAakB,EAAKnB,QAAQE,MAA1B,QACA,wCAAciB,EAAKhB,MAAnB,KACA,yBAAKhB,UAAU,YACX,sCACA,uCAEJ,+CAGR,OACI,yBAAKA,UAAU,kBACjB,yBAAKA,UAAU,aACJyB,GAEX,yBAAKzB,UAAU,YAAf,+BCMSiC,MA5Bf,WACI,IADW,EAEaT,mBADF,YADX,mBAEJU,EAFI,KAEEpC,EAFF,KAGPqC,EAAc,KAOlB,OALIA,EAJkB,aAGlBD,EACc,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAId,oCACA,kBAAC,EAAD,CAAQpC,QAASA,EAASC,KAAM,CAAEG,cAXhB,WAW+BC,UAXP,UAY1C,8BACKgC,GAEL,kBAAC,EAAD,QCXYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAcC,YAAgB,CAEhCX,KAAMY,ICKJC,EAAQC,YAAe,CACzBlC,QAAS8B,IAGbK,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUJ,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,MAAzB,MAEJK,SAASC,eAAe,SFiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65f8e199.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({ setView, menu }) => (\r\n    <header>\r\n        <h1>Tvättbjörnar 'R us</h1>\r\n        <nav className=\"menu\">\r\n            <div onClick={() => setView(menu.VIEW_PRODUCTS)}>\r\n                Produkter\r\n            </div>\r\n            <div onClick={() => setView(menu.VIEW_CART)} className=\"cart\">\r\n                Kundvagn (5)\r\n            </div>\r\n        </nav>\r\n    </header>\r\n)\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer = () => (\r\n    <footer>\r\n        Här berättar vi om företaget, varför tvättbjörnar är bra, osv.\r\n    </footer>\r\n)\r\n\r\nexport default Footer;\r\n","import { createAction, createReducer } from '@reduxjs/toolkit';\r\n\r\n\r\n// add to cart, remove from cart, increase amount, decrease amount\r\nconst addToCart = createAction('add to cart');\r\nconst removeFromCart = createAction('remove from cart');\r\nconst increaseAmount = createAction('increase amount');\r\nconst decreaseAmount = createAction('decreaseAmount');\r\n\r\nconst actions = { addToCart, removeFromCart, increaseAmount, decreaseAmount };\r\n\r\n\r\nconst initialState = [\r\n    {\r\n        product: { name: 'Otto', price: 1000 },\r\n        count: 1\r\n    }\r\n]\r\n\r\nconst reducer = createReducer(initialState, {\r\n    [addToCart]: (state, action) => [\r\n        ...state,\r\n        { product: action.payload, count: 1 }\r\n    ]  // TODO: ändra antalet i stället, om produkten redan finns i listan\r\n})\r\n\r\n\r\nexport { actions, reducer };\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { actions } from '../features/cart';\r\n\r\nconst data = [\r\n    { name: 'Otto', price: 100 },\r\n    { name: 'Lena', price: 150 },\r\n    { name: 'Ranger Rick', price: 200 },\r\n    { name: 'Rocket', price: 250 },\r\n    { name: 'Tobias', price: 300 },\r\n    { name: 'Sharmin', price: 350 },\r\n    { name: 'Pontus', price: 400 },\r\n    { name: 'Oscar', price: 450 },\r\n    { name: 'Neda', price: 500 },\r\n]\r\n\r\nconst Products = () => {\r\n    const dispatch = useDispatch();\r\n    const [racoons/*, setRacoons*/] = useState(data);\r\n    const elements = racoons.map(racoon => {\r\n        const handleClick = () => dispatch(actions.addToCart(racoon));\r\n        return (\r\n            <div key={racoon.name}>\r\n                <div>{racoon.name}</div>\r\n                <div>Pris: {racoon.price} kr</div>\r\n                <button onClick={handleClick}>Lägg till i kundvagn</button>\r\n            </div>\r\n        );\r\n    })\r\n    return (\r\n        <div className=\"products\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Products;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\n// const data = [\r\n//     {\r\n//         product: { name: 'Otto', price: 100 },\r\n//         count: 1\r\n//     }\r\n// ]\r\n\r\nconst Cart = () => {\r\n    const data = useSelector(state => state.cart)\r\n    const elements = data.map(item => (\r\n        <div key={item.product.name}>\r\n            <div> {item.product.name} </div>\r\n            <div> Pris: {item.product.price} kr </div>\r\n            <div> Antal: {item.count} </div>\r\n            <div className=\"flex-row\">\r\n                <button>+1</button>\r\n                <button>-1</button>\r\n            </div>\r\n            <button>Ta bort</button>\r\n        </div>\r\n    ))\r\n    return (\r\n        <div className=\"cart-container\">\r\n    \t\t<div className=\"show-cart\">\r\n                {elements}\r\n    \t\t</div>\r\n    \t\t<div className=\"cart-sum\"> Summa kundvagn: 5000 kr </div>\r\n    \t</div>\r\n    )\r\n};\r\n\r\nexport default Cart;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Products from './components/Products'\nimport Cart from './components/Cart'\n\nfunction App() {\n    const VIEW_PRODUCTS = 'products', VIEW_CART = 'cart';\n    const [view, setView] = useState(VIEW_PRODUCTS);\n    let mainContent = null;\n    if( view === VIEW_PRODUCTS ) {\n        mainContent = <Products />;\n    } else {// if( view == VIEW_CART ) {\n        mainContent = <Cart />;\n    }\n\n    return (\n        <>\n        <Header setView={setView} menu={{ VIEW_PRODUCTS, VIEW_CART }} />\n        <main>\n            {mainContent}\n        </main>\n        <Footer />\n        </>\n    );\n}\n\n/* Gameplan:\n1. gör så att Products och Cart använder data för att generera JSX, i stället för statisk HTML (lista med produktobjekt osv)\n2. installera Redux\n3. skapa en feature för kundvagnen i Redux\n4. Cart ska hämta sin data från kundvagnens feature\n5. Products ska kunna lägga till i kundvagnen\n6. Cart ska kunna ändra antal och ta bort från kundvagnen*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { reducer as cartReducer } from './cart';\r\n\r\nconst rootReducer = combineReducers({\r\n    // add feature reducer here\r\n    cart: cartReducer\r\n})\r\n\r\nexport { rootReducer };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './features/rootReducer';\n\nconst store = configureStore({\n    reducer: rootReducer\n})\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}> <App /> </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}